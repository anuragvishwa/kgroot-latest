# ============================================================================
# MULTI-CLIENT DEPLOYMENT EXAMPLE
# ============================================================================
# This file demonstrates how to run multiple graph-builder instances,
# each processing messages from a different client_id.
#
# Usage:
#   docker-compose -f docker-compose.yml -f docker-compose.multi-client.yml up -d
#
# Each graph-builder instance:
# - Filters Kafka messages by CLIENT_ID
# - Uses a client-specific consumer group (kg-builder-{client_id})
# - Writes to shared Neo4j with client_id namespace
# - Exposes metrics on different ports
# ============================================================================

services:
  # ============================================================================
  # GRAPH BUILDER - Client A
  # ============================================================================
  graph-builder-client-a:
    build:
      context: ../kg
      dockerfile: Dockerfile
    container_name: kg-graph-builder-client-a
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "9091:9090" # Prometheus metrics for client A
    environment:
      # Multi-tenant: Process only client-a messages
      CLIENT_ID: client-a

      # Kafka configuration
      KAFKA_BROKERS: ${KAFKA_ADVERTISED_HOST}:9092
      KAFKA_GROUP: kg-builder # Will become "kg-builder-client-a"

      # Neo4j configuration (shared with other clients)
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: ${NEO4J_PASSWORD:-anuragvishwa}

      # Topics (shared topics, filtered by client_id)
      TOPIC_LOGS: logs.normalized
      TOPIC_EVENTS: events.normalized
      TOPIC_ALERTS: alerts.enriched
      TOPIC_RES: state.k8s.resource
      TOPIC_TOPO: state.k8s.topology
      TOPIC_PROM_TARGETS: state.prom.targets
      TOPIC_PROM_RULES: state.prom.rules

      # RCA configuration
      RCA_WINDOW_MIN: "15"
      SEVERITY_ESCALATION_ENABLED: "true"
      SEVERITY_ESCALATION_WINDOW_MIN: "5"
      SEVERITY_ESCALATION_THRESHOLD: "3"
      INCIDENT_CLUSTERING_ENABLED: "true"

      # Metrics
      METRICS_PORT: "9090"

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - kg-network

  # ============================================================================
  # GRAPH BUILDER - Client B
  # ============================================================================
  graph-builder-client-b:
    build:
      context: ../kg
      dockerfile: Dockerfile
    container_name: kg-graph-builder-client-b
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "9092:9090" # Prometheus metrics for client B
    environment:
      # Multi-tenant: Process only client-b messages
      CLIENT_ID: client-b

      # Kafka configuration
      KAFKA_BROKERS: ${KAFKA_ADVERTISED_HOST}:9092
      KAFKA_GROUP: kg-builder # Will become "kg-builder-client-b"

      # Neo4j configuration (shared with other clients)
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: ${NEO4J_PASSWORD:-anuragvishwa}

      # Topics (shared topics, filtered by client_id)
      TOPIC_LOGS: logs.normalized
      TOPIC_EVENTS: events.normalized
      TOPIC_ALERTS: alerts.enriched
      TOPIC_RES: state.k8s.resource
      TOPIC_TOPO: state.k8s.topology
      TOPIC_PROM_TARGETS: state.prom.targets
      TOPIC_PROM_RULES: state.prom.rules

      # RCA configuration
      RCA_WINDOW_MIN: "15"
      SEVERITY_ESCALATION_ENABLED: "true"
      SEVERITY_ESCALATION_WINDOW_MIN: "5"
      SEVERITY_ESCALATION_THRESHOLD: "3"
      INCIDENT_CLUSTERING_ENABLED: "true"

      # Metrics
      METRICS_PORT: "9090"

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - kg-network

  # ============================================================================
  # GRAPH BUILDER - Client C
  # ============================================================================
  graph-builder-client-c:
    build:
      context: ../kg
      dockerfile: Dockerfile
    container_name: kg-graph-builder-client-c
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "9093:9090" # Prometheus metrics for client C
    environment:
      # Multi-tenant: Process only client-c messages
      CLIENT_ID: client-c

      # Kafka configuration
      KAFKA_BROKERS: ${KAFKA_ADVERTISED_HOST}:9092
      KAFKA_GROUP: kg-builder # Will become "kg-builder-client-c"

      # Neo4j configuration (shared with other clients)
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: ${NEO4J_PASSWORD:-anuragvishwa}

      # Topics (shared topics, filtered by client_id)
      TOPIC_LOGS: logs.normalized
      TOPIC_EVENTS: events.normalized
      TOPIC_ALERTS: alerts.enriched
      TOPIC_RES: state.k8s.resource
      TOPIC_TOPO: state.k8s.topology
      TOPIC_PROM_TARGETS: state.prom.targets
      TOPIC_PROM_RULES: state.prom.rules

      # RCA configuration
      RCA_WINDOW_MIN: "15"
      SEVERITY_ESCALATION_ENABLED: "true"
      SEVERITY_ESCALATION_WINDOW_MIN: "5"
      SEVERITY_ESCALATION_THRESHOLD: "3"
      INCIDENT_CLUSTERING_ENABLED: "true"

      # Metrics
      METRICS_PORT: "9090"

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - kg-network
