version: '3.8'

# ═══════════════════════════════════════════════════════════════════════════
# KG RCA Mini-Server - Control Plane Architecture (v2.0.0)
# ═══════════════════════════════════════════════════════════════════════════
#
# This setup includes:
# - Kafka cluster with 3 partitions
# - Neo4j graph database
# - Control Plane Manager (auto-spawns graph-builders dynamically)
# - AlertManager & Alert Receiver
#
# Key Features:
# ✅ Zero-touch operations: helm install = auto-spawn graph-builder
# ✅ Auto-cleanup: helm delete = auto-cleanup resources
# ✅ Self-healing: crashed containers auto-restart
# ✅ Heartbeat monitoring: stale clusters detected after 2min
# ═══════════════════════════════════════════════════════════════════════════

networks:
  kg-network:
    driver: bridge

services:
  # ───────────────────────────────────────────────────────────────────────────
  # Kafka - Message Broker
  # ───────────────────────────────────────────────────────────────────────────
  kg-kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kg-kafka
    hostname: kg-kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft mode (no Zookeeper)
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kg-kafka:29092,CONTROLLER://kg-kafka:29093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kg-kafka:29092,EXTERNAL://98.90.147.12:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kg-kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller

      # Storage & Performance
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_NUM_PARTITIONS: 3

      # Topic configs for compaction
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_MS: 604800000  # 7 days
      KAFKA_LOG_SEGMENT_MS: 3600000      # 1 hour

      # Cluster ID (must be unique)
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kg-kafka:29092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ───────────────────────────────────────────────────────────────────────────
  # Neo4j - Graph Database
  # ───────────────────────────────────────────────────────────────────────────
  kg-neo4j:
    image: neo4j:5.23-community
    container_name: kg-neo4j
    hostname: kg-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/Kg9mN8pQ2vR5wX7jL4hF6sT3bD1nY0zA
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_allow__csv__import__from__file__urls: true
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - kg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "Kg9mN8pQ2vR5wX7jL4hF6sT3bD1nY0zA", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ───────────────────────────────────────────────────────────────────────────
  # Control Plane Manager - Dynamic Consumer Spawning (NEW!)
  # ───────────────────────────────────────────────────────────────────────────
  kg-control-plane:
    build: ../control-plane
    image: anuragvishwa/kg-control-plane:1.0.1
    container_name: kg-control-plane
    hostname: kg-control-plane
    ports:
      - "9090:9090"  # Prometheus metrics
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker API access
    environment:
      # Kafka connection
      KAFKA_BROKERS: "kg-kafka:29092"

      # Neo4j connection
      NEO4J_URI: "neo4j://kg-neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASS: "Kg9mN8pQ2vR5wX7jL4hF6sT3bD1nY0zA"

      # Docker settings
      DOCKER_NETWORK: "mini-server-prod_kg-network"

      # Reconciliation settings
      HEARTBEAT_TIMEOUT: "2m"       # Mark stale after 2min
      CLEANUP_TIMEOUT: "5m"          # Cleanup after 5min
      RECONCILE_INTERVAL: "30s"      # Check every 30s

      # Graph-builder settings
      GRAPH_BUILDER_IMAGE: "anuragvishwa/kg-graph-builder:1.0.20"
      GB_MEMORY_LIMIT: "256M"
      GB_CPU_LIMIT: "0.5"
    networks:
      - kg-network
    restart: unless-stopped
    depends_on:
      kg-kafka:
        condition: service_healthy
      kg-neo4j:
        condition: service_healthy

  # ───────────────────────────────────────────────────────────────────────────
  # AlertManager - Alert aggregation and routing
  # ───────────────────────────────────────────────────────────────────────────
  kg-alertmanager:
    image: prom/alertmanager:latest
    container_name: kg-alertmanager
    hostname: kg-alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    networks:
      - kg-network
    restart: unless-stopped

  # ───────────────────────────────────────────────────────────────────────────
  # Alert Receiver - Process alerts and send to Kafka
  # ───────────────────────────────────────────────────────────────────────────
  kg-alert-receiver:
    image: anuragvishwa/kg-alert-receiver:1.0.18
    container_name: kg-alert-receiver
    hostname: kg-alert-receiver
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: "kg-kafka:29092"
      KAFKA_TOPIC: "alerts.raw"
      SERVER_PORT: "8080"
    networks:
      - kg-network
    restart: unless-stopped
    depends_on:
      - kg-kafka

volumes:
  kafka-data:
    driver: local
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
  alertmanager-data:
    driver: local

# ═══════════════════════════════════════════════════════════════════════════
# Usage:
# ═══════════════════════════════════════════════════════════════════════════
#
# 1. Start the infrastructure:
#    docker-compose -f docker-compose-control-plane.yml up -d
#
# 2. Create Kafka topics:
#    docker exec kg-kafka kafka-topics.sh --bootstrap-server localhost:29092 \
#      --create --topic cluster.registry --partitions 3 --replication-factor 1 \
#      --config cleanup.policy=compact
#
#    docker exec kg-kafka kafka-topics.sh --bootstrap-server localhost:29092 \
#      --create --topic cluster.heartbeat --partitions 3 --replication-factor 1 \
#      --config retention.ms=3600000
#
# 3. Deploy Kubernetes agents (on each cluster):
#    helm install kg-rca-agent anuragvishwa/kg-rca-agent \
#      --version 2.0.0 \
#      --namespace observability \
#      --set client.id="af-10" \
#      --set client.kafka.brokers="98.90.147.12:9092"
#
# 4. Watch control plane logs:
#    docker logs -f kg-control-plane
#
# 5. Check Prometheus metrics:
#    curl http://localhost:9090/metrics
#
# 6. Monitor Kafka topics:
#    # Registry
#    docker exec kg-kafka kafka-console-consumer.sh \
#      --bootstrap-server localhost:29092 \
#      --topic cluster.registry \
#      --property print.key=true \
#      --from-beginning
#
#    # Heartbeats
#    docker exec kg-kafka kafka-console-consumer.sh \
#      --bootstrap-server localhost:29092 \
#      --topic cluster.heartbeat \
#      --property print.key=true
#
# ═══════════════════════════════════════════════════════════════════════════
