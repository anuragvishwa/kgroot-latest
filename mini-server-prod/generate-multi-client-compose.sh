#!/bin/bash
# ============================================================================
# Generate Multi-Client Docker Compose Configuration
# ============================================================================
# This script discovers client IDs from Kafka and generates a docker-compose
# override file with graph-builder instances for each client.
# ============================================================================

set -e

# Change to script directory
cd "$(dirname "$0")"

OUTPUT_FILE="compose/docker-compose.multi-client.generated.yml"

echo "=========================================="
echo "Generating Multi-Client Configuration"
echo "=========================================="
echo ""

# Discover client IDs from Kafka topics
TOPICS=("logs.normalized" "events.normalized" "state.k8s.resource" "state.k8s.topology")
SAMPLE_SIZE=100

declare -A ALL_CLIENT_IDS

echo "🔍 Discovering client IDs from Kafka..."
echo ""

for TOPIC in "${TOPICS[@]}"; do
    # Check if topic exists
    if ! docker exec kg-kafka kafka-topics.sh \
        --bootstrap-server localhost:9092 \
        --list 2>/dev/null | grep -q "^${TOPIC}$"; then
        continue
    fi

    # Get RECENT messages only (not from beginning) to find active clients
    # This samples the latest messages, so inactive clients will be excluded
    # Note: Messages have format: {"Value": "{...}", ...}
    # The actual data is in the Value field as a JSON string
    # We need to run jq on the host, not in the kafka container
    CLIENT_IDS=$(docker exec kg-kafka kafka-console-consumer.sh \
        --bootstrap-server localhost:9092 \
        --topic "$TOPIC" \
        --max-messages "$SAMPLE_SIZE" \
        --timeout-ms 5000 2>/dev/null | \
        jq -r 'select(.Value != null) | .Value | fromjson | select(.client_id != null) | .client_id' 2>/dev/null | \
        sort -u || true)

    if [ -n "$CLIENT_IDS" ]; then
        echo "$CLIENT_IDS" | while read -r cid; do
            if [ -n "$cid" ]; then
                ALL_CLIENT_IDS["$cid"]=1
            fi
        done
    fi
done

if [ ${#ALL_CLIENT_IDS[@]} -eq 0 ]; then
    echo "❌ No client_ids found in Kafka topics!"
    echo ""
    echo "Please ensure:"
    echo "  1. Client-side Vector agents are deployed"
    echo "  2. client.id is configured in Helm chart values"
    echo "  3. Messages are being sent to Kafka"
    echo ""
    exit 1
fi

echo "✅ Found ${#ALL_CLIENT_IDS[@]} unique client ID(s):"
for client_id in "${!ALL_CLIENT_IDS[@]}"; do
    echo "   • $client_id"
done
echo ""

# Generate docker-compose.yml
echo "📝 Generating $OUTPUT_FILE..."
echo ""

cat > "$OUTPUT_FILE" <<'HEADER'
# ============================================================================
# AUTO-GENERATED MULTI-CLIENT DEPLOYMENT
# ============================================================================
# Generated automatically from actual client_ids in Kafka topics
# DO NOT EDIT THIS FILE MANUALLY - Regenerate using generate-multi-client-compose.sh
#
# Usage:
#   docker compose -f docker-compose.yml -f docker-compose.multi-client.generated.yml up -d
#
# Each graph-builder instance:
# - Filters Kafka messages by CLIENT_ID
# - Uses a client-specific consumer group (kg-builder-{client_id})
# - Writes to shared Neo4j with client_id namespace
# - Exposes metrics on different ports
# ============================================================================

services:
HEADER

port=9091
for client_id in "${!ALL_CLIENT_IDS[@]}"; do
    # Sanitize client_id for service name (replace special chars with hyphens)
    service_name=$(echo "$client_id" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

    cat >> "$OUTPUT_FILE" <<EOF
  # ============================================================================
  # GRAPH BUILDER - ${client_id}
  # ============================================================================
  graph-builder-${service_name}:
    build:
      context: ../kg
      dockerfile: Dockerfile
    container_name: kg-graph-builder-${service_name}
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "${port}:9090" # Prometheus metrics for ${client_id}
    environment:
      # Multi-tenant: Process only ${client_id} messages
      CLIENT_ID: ${client_id}

      # Kafka configuration
      KAFKA_BROKERS: \${KAFKA_ADVERTISED_HOST}:9092
      KAFKA_GROUP: kg-builder # Will become "kg-builder-${client_id}"

      # Neo4j configuration (shared with other clients)
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: \${NEO4J_PASSWORD:-anuragvishwa}

      # Topics (shared topics, filtered by client_id)
      TOPIC_LOGS: logs.normalized
      TOPIC_EVENTS: events.normalized
      TOPIC_ALERTS: alerts.enriched
      TOPIC_RES: state.k8s.resource
      TOPIC_TOPO: state.k8s.topology
      TOPIC_PROM_TARGETS: state.prom.targets
      TOPIC_PROM_RULES: state.prom.rules

      # RCA configuration
      RCA_WINDOW_MIN: "15"
      SEVERITY_ESCALATION_ENABLED: "true"
      SEVERITY_ESCALATION_WINDOW_MIN: "5"
      SEVERITY_ESCALATION_THRESHOLD: "3"
      INCIDENT_CLUSTERING_ENABLED: "true"
      ANOMALY_DETECTION_ENABLED: "true"

      # Metrics
      METRICS_PORT: "9090"

      # Logging
      LOG_LEVEL: \${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - kg-network

EOF
    ((port++))
done

echo "✅ Configuration generated: $OUTPUT_FILE"
echo ""
echo "=========================================="
echo "Deployment Instructions"
echo "=========================================="
echo ""
echo "1. Stop the current single graph-builder:"
echo "   docker compose -f compose/docker-compose.yml stop graph-builder"
echo ""
echo "2. Deploy multi-client graph-builders:"
echo "   docker compose -f compose/docker-compose.yml -f $OUTPUT_FILE up -d"
echo ""
echo "3. Verify all containers are running:"
echo "   docker compose -f compose/docker-compose.yml ps | grep graph-builder"
echo ""
echo "4. Check consumer groups:"
echo "   docker exec kg-kafka kafka-consumer-groups.sh \\"
echo "     --bootstrap-server localhost:9092 --list | grep kg-builder"
echo ""
echo "5. View metrics for each client:"
for client_id in "${!ALL_CLIENT_IDS[@]}"; do
    echo "   curl http://localhost:$((port - ${#ALL_CLIENT_IDS[@]} + $(echo "${!ALL_CLIENT_IDS[@]}" | tr ' ' '\n' | grep -n "^$client_id$" | cut -d: -f1) - 1 + 9091))/metrics  # ${client_id}"
done
echo ""
