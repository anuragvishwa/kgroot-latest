apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-init-script
  namespace: observability
data:
  kafka-init.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    # Make Kafka CLI tools available on PATH
    export PATH="$PATH:/opt/kafka/bin"

    TOPICS="kafka-topics.sh"
    BROKER="kafka.observability.svc:9092"

    echo "[kafka-init] Waiting for Kafka at $BROKER..."
    until $TOPICS --bootstrap-server "$BROKER" --list >/dev/null 2>&1; do
      echo "[kafka-init] broker not ready yet, retrying..."
      sleep 2
    done
    echo "[kafka-init] Broker reachable. Creating topicsâ€¦"

    DAY_MS=$((24*3600*1000))
    WEEK_MS=$((7*24*3600*1000))
    MONTH_MS=$((30*24*3600*1000))
    YEAR_MS=$((365*24*3600*1000))

    create_topic () {
      local NAME="$1" PARTS="$2" RET_MS="$3"
      shift 3
      echo "[kafka-init] Ensuring topic: $NAME"
      $TOPICS --bootstrap-server "$BROKER" --create --if-not-exists \
        --topic "$NAME" --partitions "$PARTS" --replication-factor 1 \
        --config "compression.type=gzip" \
        --config "retention.ms=$RET_MS" \
        "$@"
    }

    # ---------- RAW streams (append-only) ----------
    create_topic raw.k8s.logs       6  $((3*DAY_MS))
    create_topic raw.k8s.events     3  $((14*DAY_MS))
    create_topic raw.prom.alerts    3  $MONTH_MS
    create_topic raw.events         3  $MONTH_MS
    create_topic events.normalized  6  $((60*DAY_MS))
    create_topic logs.normalized    6  $((14*DAY_MS))
    create_topic alerts.normalized  3  $MONTH_MS
    create_topic alerts.enriched    3  $MONTH_MS

    # ---------- Compacted state (latest truth) ----------
    COMPACT_RATIO="0.1"
    SEGMENT_MS=$DAY_MS

    create_topic state.k8s.resource 3 $YEAR_MS \
      --config "cleanup.policy=compact" \
      --config "min.cleanable.dirty.ratio=$COMPACT_RATIO" \
      --config "segment.ms=$SEGMENT_MS"

    create_topic state.k8s.topology 3 $YEAR_MS \
      --config "cleanup.policy=compact" \
      --config "min.cleanable.dirty.ratio=$COMPACT_RATIO" \
      --config "segment.ms=$SEGMENT_MS"

    create_topic state.prom.rules   1 $YEAR_MS \
      --config "cleanup.policy=compact" \
      --config "min.cleanable.dirty.ratio=$COMPACT_RATIO" \
      --config "segment.ms=$SEGMENT_MS"

    create_topic state.prom.targets 1 $WEEK_MS \
      --config "cleanup.policy=compact" \
      --config "min.cleanable.dirty.ratio=$COMPACT_RATIO" \
      --config "segment.ms=$SEGMENT_MS"

    create_topic graph.commands     3 $YEAR_MS \
      --config "cleanup.policy=compact" \
      --config "min.cleanable.dirty.ratio=$COMPACT_RATIO" \
      --config "segment.ms=$SEGMENT_MS"

    # ---------- DLQs ----------
    create_topic dlq.raw            3  $WEEK_MS
    create_topic dlq.normalized     3  $WEEK_MS

    echo "[kafka-init] All topics ensured."
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: observability
spec:
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: kafka
  ports:
    - name: plaintext
      port: 9092
      targetPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-external
  namespace: observability
spec:
  selector:
    app: kafka
  ports:
    - name: external
      port: 29092
      targetPort: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: observability
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
        - name: fix-permissions
          image: busybox
          command: ["sh", "-c", "chmod -R 777 /var/lib/kafka/data"]
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
      containers:
        - name: kafka
          image: apache/kafka:3.9.0
          ports:
            - containerPort: 9092
              name: plaintext
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          env:
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka.observability.svc:9092"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@kafka-0.kafka.observability.svc:9093"
            - name: CLUSTER_ID
              value: "abcdefghijklmnopqrstuv"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "false"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/data"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-init
  namespace: observability
spec:
  # Allow manual deletion after it completes
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: kafka-init
          image: apache/kafka:3.9.0
          command: ["/bin/bash"]
          args: ["/scripts/kafka-init.sh"]
          volumeMounts:
            - name: init-script
              mountPath: /scripts
      volumes:
        - name: init-script
          configMap:
            name: kafka-init-script
            defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: observability
spec:
  type: NodePort
  selector:
    app: kafka-ui
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30777
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "prod"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: "kafka.observability.svc:9092"
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              memory: "512Mi"
