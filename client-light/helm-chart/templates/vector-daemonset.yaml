{{- if .Values.vector.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-vector-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
    component: vector
data:
  vector.toml: |
    # Data directory
    data_dir = "/vector-data"

    # ─────────────────────────────────────────────────────────────────────────
    # Sources - Kubernetes Logs
    # ─────────────────────────────────────────────────────────────────────────
    [sources.kubernetes_logs]
    type = "kubernetes_logs"
    # Vector requires the node name when running as a DaemonSet
    # to scope log collection to the current node.
    self_node_name = "${VECTOR_SELF_NODE_NAME}"

    # ─────────────────────────────────────────────────────────────────────────
    # Transforms - Add Client Metadata
    # ─────────────────────────────────────────────────────────────────────────
    [transforms.normalize]
    type = "remap"
    inputs = ["kubernetes_logs"]
    source = '''
    .client_id = "{{ .Values.client.id }}"
    .event_time = now()

    # Extract pod_uid for use as message key (for Kafka partitioning)
    pod_uid, err = get_env_var("HOSTNAME")
    if is_null(pod_uid) || pod_uid == "" {
      # Fallback: use pod namespace + name as key
      pod_ns = string!(.kubernetes.pod_namespace)
      pod_name = string!(.kubernetes.pod_name)
      pod_uid = join!([pod_ns, pod_name], "/")
    }
    .pod_uid = pod_uid
    '''

    # ─────────────────────────────────────────────────────────────────────────
    # Sources - Alertmanager Webhook (optional)
    # ─────────────────────────────────────────────────────────────────────────
    {{- if .Values.alertsWebhook.enabled }}
    [sources.alertmanager_webhook]
    type = "http_server"
    address = "0.0.0.0:{{ .Values.alertsWebhook.port }}"
    decoding.codec = "json"

    # Add fingerprint/key for raw alerts (before exploding)
    [transforms.prom_alerts_raw_key]
    type   = "remap"
    inputs = ["alertmanager_webhook"]
    source = '''
    # Use groupKey or externalURL as message key for partitioning
    key = string(.groupKey) ?? string(.externalURL) ?? uuid_v4()
    client_id = get_env_var("CLIENT_ID")
    if is_null(client_id) || client_id == "" {
      .message_key = key
    } else {
      .message_key = join!([client_id, string!(key)], "::")
    }
    '''

    # Explode/unwrap Alertmanager payloads into single alerts
    [transforms.prom_alerts_explode]
    type   = "remap"
    inputs = ["prom_alerts_raw_key"]
    source = '''
    if is_array(.alerts) {
      . = unnest!(.alerts)
    } else if is_object(.alerts) {
      . = .alerts
    }
    '''

    # Normalize Prometheus alerts
    [transforms.prom_alerts_norm]
    type   = "remap"
    inputs = ["prom_alerts_explode"]
    source = '''
    .event_id   = uuid_v4()
    .event_time = to_string(now())
    .etype      = "prom.alert"

    if !is_object(.labels) { .labels = {} }
    if !is_object(.annotations) { .annotations = {} }

    # alertname (reason)
    alertname, _ = to_string(.labels.alertname)
    if is_null(alertname) || alertname == "" { alertname, _ = to_string(.commonLabels.alertname) }
    if is_null(alertname) || alertname == "" { alertname = "UNKNOWN" }
    .reason = alertname

    # status
    st, _ = to_string(.status)
    if is_null(st) || st == "" { st = "firing" }
    .status = st

    # severity
    sev, _ = to_string(.labels.severity)
    if is_null(sev) || sev == "" { sev, _ = to_string(.commonLabels.severity) }
    if is_null(sev) || sev == "" { sev = "WARNING" }
    .severity = upcase(sev)

    # message
    msg, _ = to_string(.annotations.summary)
    if is_null(msg) || msg == "" { msg, _ = to_string(.annotations.description) }
    if is_null(msg) { msg = "" }
    .message = msg

    # subject (ns/name/kind)
    ns, _ = to_string(.labels.namespace)
    if is_null(ns) { ns = "" }

    pod, _ = to_string(.labels.pod)
    if is_null(pod) { pod = "" }

    svc, _ = to_string(.labels.service)
    if is_null(svc) || svc == "" { svc, _ = to_string(.labels.job) }
    if is_null(svc) { svc = "" }

    kind = if pod != "" { "Pod" } else { "Service" }
    name = if pod != "" { pod } else { svc }
    .subject = { "kind": kind, "ns": ns, "name": name }

    # carry through labels/annotations
    .labels = .labels
    .annotations = .annotations
    '''
    {{- end }}

    # ─────────────────────────────────────────────────────────────────────────
    # Sinks - Kafka Output
    # ─────────────────────────────────────────────────────────────────────────
    [sinks.kafka]
    type = "kafka"
    inputs = ["normalize"]
    bootstrap_servers = "{{ .Values.client.kafka.brokers }}"
    {{- $defaultLogs := printf "logs.normalized" }}
    {{- $topicLogs := default $defaultLogs .Values.vector.kafkaTopic }}
    topic = "{{ $topicLogs }}"
    compression = "gzip"
    # Use pod_uid as message key for even partition distribution and ordering
    key_field = "pod_uid"

    [sinks.kafka.encoding]
    codec = "json"

    {{- if .Values.client.kafka.sasl.enabled }}
    # SASL Authentication
    [sinks.kafka.sasl]
    enabled = true
    mechanism = "{{ .Values.client.kafka.sasl.mechanism }}"
    username = "${KAFKA_SASL_USERNAME}"
    password = "${KAFKA_SASL_PASSWORD}"
    {{- end }}

    {{- if .Values.vector.rawLogsTopic }}
    # Optional raw logs mirror (high-volume)
    [sinks.kafka_raw_logs]
    type = "kafka"
    inputs = ["kubernetes_logs"]
    bootstrap_servers = "{{ .Values.client.kafka.brokers }}"
    topic = "{{ .Values.vector.rawLogsTopic }}"
    compression = "gzip"
    [sinks.kafka_raw_logs.encoding]
    codec = "json"
    {{- if .Values.client.kafka.sasl.enabled }}
    [sinks.kafka_raw_logs.sasl]
    enabled = true
    mechanism = "{{ .Values.client.kafka.sasl.mechanism }}"
    username = "${{`{`}}KAFKA_SASL_USERNAME{{`}`}}"
    password = "${{`{`}}KAFKA_SASL_PASSWORD{{`}`}}"
    {{- end }}
    {{- end }}

    {{- if .Values.alertsWebhook.enabled }}
    # Forward normalized Prometheus alerts into events.normalized (consumed by enricher)
    [sinks.kafka_prom_alerts_norm]
    type = "kafka"
    inputs = ["prom_alerts_norm"]
    bootstrap_servers = "{{ .Values.client.kafka.brokers }}"
    {{- $defaultEvents := printf "events.normalized" }}
    {{- $topicEvents := default $defaultEvents .Values.eventExporter.kafkaTopic }}
    topic = "{{ $topicEvents }}"
    compression = "gzip"
    # Partition alerts per tenant + alert key
    key_field = "message_key"
    [sinks.kafka_prom_alerts_norm.encoding]
    codec = "json"
    {{- if .Values.client.kafka.sasl.enabled }}
    [sinks.kafka_prom_alerts_norm.sasl]
    enabled = true
    mechanism = "{{ .Values.client.kafka.sasl.mechanism }}"
    username = "${{`{`}}KAFKA_SASL_USERNAME{{`}`}}"
    password = "${{`{`}}KAFKA_SASL_PASSWORD{{`}`}}"
    {{- end }}

    # Optional: also store raw Alertmanager payloads into raw.prom.alerts
    {{- $topicRaw := default "raw.prom.alerts" .Values.alertsWebhook.rawTopic }}
    [sinks.kafka_raw_prom_alerts]
    type = "kafka"
    inputs = ["prom_alerts_raw_key"]
    bootstrap_servers = "{{ .Values.client.kafka.brokers }}"
    topic = "{{ $topicRaw }}"
    compression = "gzip"
    # Use groupKey/externalURL as message key for partitioning
    key_field = "message_key"
    [sinks.kafka_raw_prom_alerts.encoding]
    codec = "json"
    {{- if .Values.client.kafka.sasl.enabled }}
    [sinks.kafka_raw_prom_alerts.sasl]
    enabled = true
    mechanism = "{{ .Values.client.kafka.sasl.mechanism }}"
    username = "${{`{`}}KAFKA_SASL_USERNAME{{`}`}}"
    password = "${{`{`}}KAFKA_SASL_PASSWORD{{`}`}}"
    {{- end }}
    {{- end }}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-vector
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
    component: vector
spec:
  selector:
    matchLabels:
      {{- include "kg-rca-agent.selectorLabels" . | nindent 6 }}
      component: vector
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        {{- include "kg-rca-agent.selectorLabels" . | nindent 8 }}
        component: vector
      annotations:
        checksum/config: {{ toYaml .Values.vector.config | sha256sum }}
        checksum/secret: {{ toYaml .Values.client.kafka.sasl | sha256sum }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      hostNetwork: false
      dnsPolicy: ClusterFirst
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        fsGroup: 0
      containers:
        - name: vector
          image: "{{ .Values.vector.image.repository }}:{{ .Values.vector.image.tag }}"
          imagePullPolicy: {{ .Values.vector.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: false
            privileged: false
            allowPrivilegeEscalation: false
          args:
            - "--config"
            - "/etc/vector/vector.toml"
            - "--verbose"
          env:
            # Node identity for kubernetes_logs source
            - name: VECTOR_SELF_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- if .Values.client.kafka.sasl.enabled }}
            # Kafka SASL Credentials from Secret
            - name: KAFKA_SASL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "kg-rca-agent.fullname" . }}-secrets
                  key: kafka-sasl-username
            - name: KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kg-rca-agent.fullname" . }}-secrets
                  key: kafka-sasl-password
            {{- end }}
          resources:
            {{- toYaml .Values.vector.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/vector
              readOnly: true
            - name: var-log
              mountPath: /var/log
              readOnly: true
            - name: var-lib
              mountPath: /var/lib
              readOnly: true
            - name: data
              mountPath: /vector-data
      volumes:
        - name: config
          configMap:
            name: {{ include "kg-rca-agent.fullname" . }}-vector-config
        - name: var-log
          hostPath:
            path: /var/log
        - name: var-lib
          hostPath:
            path: /var/lib
        - name: data
          emptyDir: {}
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
{{- end }}
