{{- if .Values.prometheus.install }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["namespaces", "services", "pods", "configmaps", "secrets", "serviceaccounts", "persistentvolumeclaims"]
    verbs: ["get", "list", "create", "update", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "create", "update", "patch"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "create", "update", "patch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
subjects:
  - kind: ServiceAccount
    name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kg-rca-agent.labels" . | nindent 4 }}
    component: prometheus-installer
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "kg-rca-agent.selectorLabels" . | nindent 8 }}
        component: prometheus-installer
    spec:
      serviceAccountName: {{ include "kg-rca-agent.fullname" . }}-prometheus-installer
      restartPolicy: OnFailure
      containers:
        - name: prometheus-installer
          image: alpine/helm:3.13.0
          command:
            - /bin/sh
            - -c
            - |
              set -e

              echo "[INFO] Checking if Prometheus exists in namespace {{ .Values.prometheus.namespace }}..."

              # Check if the namespace exists
              if ! kubectl get namespace {{ .Values.prometheus.namespace }} >/dev/null 2>&1; then
                echo "[INFO] Namespace {{ .Values.prometheus.namespace }} does not exist. Creating..."
                kubectl create namespace {{ .Values.prometheus.namespace }}
              fi

              # Check if kube-prometheus-stack is already installed
              if helm status {{ .Values.prometheus.releaseName }} -n {{ .Values.prometheus.namespace }} >/dev/null 2>&1; then
                echo "[INFO] Prometheus is already installed in {{ .Values.prometheus.namespace }}. Skipping installation."
                exit 0
              fi

              # Check if there's a Prometheus service already running
              if kubectl get svc -n {{ .Values.prometheus.namespace }} -l app.kubernetes.io/name=prometheus >/dev/null 2>&1; then
                echo "[INFO] Found existing Prometheus service in {{ .Values.prometheus.namespace }}. Skipping installation."
                exit 0
              fi

              echo "[INFO] Prometheus not found. Installing kube-prometheus-stack..."

              # Add Helm repository
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update

              # Install kube-prometheus-stack
              helm install {{ .Values.prometheus.releaseName }} prometheus-community/kube-prometheus-stack \
                --namespace {{ .Values.prometheus.namespace }} \
                --create-namespace \
                --set grafana.enabled={{ .Values.prometheus.config.grafana.enabled }} \
                --set prometheus.enabled={{ .Values.prometheus.config.prometheus.enabled }} \
                --set prometheus.service.port={{ .Values.prometheus.config.prometheus.service.port }} \
                --set prometheus.prometheusSpec.resources.requests.cpu={{ .Values.prometheus.config.prometheus.prometheusSpec.resources.requests.cpu }} \
                --set prometheus.prometheusSpec.resources.requests.memory={{ .Values.prometheus.config.prometheus.prometheusSpec.resources.requests.memory }} \
                --set prometheus.prometheusSpec.resources.limits.cpu={{ .Values.prometheus.config.prometheus.prometheusSpec.resources.limits.cpu }} \
                --set prometheus.prometheusSpec.resources.limits.memory={{ .Values.prometheus.config.prometheus.prometheusSpec.resources.limits.memory }} \
                --set prometheus.prometheusSpec.retention={{ .Values.prometheus.config.prometheus.prometheusSpec.retention }} \
                --set alertmanager.enabled={{ .Values.prometheus.config.alertmanager.enabled }} \
                --set alertmanager.service.port={{ .Values.prometheus.config.alertmanager.service.port }} \
                --set kubeStateMetrics.enabled={{ .Values.prometheus.config.kubeStateMetrics.enabled }} \
                --set nodeExporter.enabled={{ .Values.prometheus.config.nodeExporter.enabled }} \
                --wait \
                --timeout 10m

              echo "[SUCCESS] Prometheus installed successfully!"

              # Get the Prometheus service URL
              PROM_SVC=$(kubectl get svc -n {{ .Values.prometheus.namespace }} -l app.kubernetes.io/name=prometheus -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "{{ .Values.prometheus.releaseName }}-kube-prometheus-prometheus")
              PROM_URL="http://${PROM_SVC}.{{ .Values.prometheus.namespace }}.svc:{{ .Values.prometheus.config.prometheus.service.port }}"

              echo "[INFO] Prometheus URL: $PROM_URL"
              echo "[INFO] Update your stateWatcher.prometheusUrl to: $PROM_URL"
{{- end }}