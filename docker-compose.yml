services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092" # for containers on the Docker network (kafka:9092)
      - "29092:29092" # for K8s pods via host.minikube.internal:29092
    environment:
      # --- Listeners (both internal + external) ---
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.minikube.internal:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # --- Zookeeper ---
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181

      # --- Allow plaintext (Bitnami toggle) ---
      ALLOW_PLAINTEXT_LISTENER: "yes"

      # --- Production tuning ---
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_NUM_PARTITIONS: "3"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: "168" # 7 days
      KAFKA_CFG_LOG_SEGMENT_BYTES: "1073741824" # 1GB
      KAFKA_CFG_COMPRESSION_TYPE: "gzip"
      # DLQ support
      KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    volumes:
      - kafka-data:/bitnami/kafka

  # Creates all topics once Kafka is up
  kafka-init:
    image: bitnami/kafka:3.7
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/init:ro
    entrypoint: ["/bin/bash", "-lc"]
    command: /init/kafka-init.sh

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "7777:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: prod
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_started
    restart: unless-stopped

  neo4j:
    image: neo4j:5.20
    environment:
      NEO4J_AUTH: neo4j/anuragvishwa
      NEO4J_PLUGINS: '["apoc"]'
      # Production memory settings
      NEO4J_server_memory_heap_max__size: 4G
      NEO4J_server_memory_heap_initial__size: 2G
      NEO4J_server_memory_pagecache_size: 2G
      # Transaction memory limits
      NEO4J_db_memory_transaction_total_max: 4G
      NEO4J_db_memory_transaction_max: 2G
      # APOC config
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4jdata:/data
      - neo4j-logs:/logs
      - neo4j-metrics:/metrics
    healthcheck:
      test:
        ["CMD", "cypher-shell", "-u", "neo4j", "-p", "anuragvishwa", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  graph-builder:
    build: ./kg # or image: graph-builder:latest if you prebuilt
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP: kg-builder
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: anuragvishwa
      TOPIC_LOGS: logs.normalized
      RCA_WINDOW_MIN: "15"
      # Production features
      SEVERITY_ESCALATION_ENABLED: "true"
      SEVERITY_ESCALATION_WINDOW_MIN: "5"
      SEVERITY_ESCALATION_THRESHOLD: "3"
      INCIDENT_CLUSTERING_ENABLED: "true"
      ANOMALY_DETECTION_ENABLED: "true"
      # Metrics
      METRICS_PORT: "9090"
    ports:
      - "9090:9090" # Prometheus metrics
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/healthz",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  alerts-enricher:
    build: ./alerts-enricher
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP: alerts-enricher
      INPUT_TOPIC: events.normalized
      OUTPUT_TOPIC: alerts.enriched
      STATE_RESOURCE_TOPIC: state.k8s.resource
      STATE_TOPOLOGY_TOPIC: state.k8s.topology
    restart: unless-stopped

  # Knowledge Graph API for incremental updates and RCA queries
  kg-api:
    build: ./kg-api
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: anuragvishwa
      PORT: "8080"
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    depends_on:
      - graph-builder
      - neo4j
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PLUGINS_PREINSTALL: "kniepdennis-neo4j-datasource@1.3.2"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - neo4j
    restart: unless-stopped

volumes:
  neo4jdata:
  neo4j-logs:
  neo4j-metrics:
  kafka-data:
  prometheus-data:
  grafana-data:
